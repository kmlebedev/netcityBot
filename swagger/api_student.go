/*
 * NetSchool
 *
 * The API for the NetSchool irTech project
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type StudentApiService service

/*
StudentApiService
returns all assignments
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param studentId
 * @param optional nil or *StudentApiStudentDiaryOpts - Optional Parameters:
     * @param "WeekStart" (optional.String) -
     * @param "WeekEnd" (optional.String) -
     * @param "WithLaAssigns" (optional.Bool) -
     * @param "WithPastMandatory" (optional.Bool) -
     * @param "YearId" (optional.Int32) -
@return Diary
*/

type StudentApiStudentDiaryOpts struct {
	WeekStart         optional.String
	WeekEnd           optional.String
	WithLaAssigns     optional.Bool
	WithPastMandatory optional.Bool
	YearId            optional.Int32
}

func (a *StudentApiService) StudentDiary(ctx context.Context, studentId string, localVarOptionals *StudentApiStudentDiaryOpts) (Diary, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Diary
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/student/diary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("studentId", parameterToString(studentId, ""))
	if localVarOptionals != nil && localVarOptionals.WeekStart.IsSet() {
		localVarQueryParams.Add("weekStart", parameterToString(localVarOptionals.WeekStart.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WeekEnd.IsSet() {
		localVarQueryParams.Add("weekEnd", parameterToString(localVarOptionals.WeekEnd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WithLaAssigns.IsSet() {
		localVarQueryParams.Add("withLaAssigns", parameterToString(localVarOptionals.WithLaAssigns.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WithPastMandatory.IsSet() {
		localVarQueryParams.Add("withPastMandatory", parameterToString(localVarOptionals.WithPastMandatory.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.YearId.IsSet() {
		localVarQueryParams.Add("yearId", parameterToString(localVarOptionals.YearId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Diary
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
